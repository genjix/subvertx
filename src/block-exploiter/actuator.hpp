#ifndef BLOCK_EXPLOITER_ACTUATOR
#define BLOCK_EXPLOITER_ACTUATOR

#include <bitcoin/bitcoin.hpp>
using namespace libbitcoin;

#include "lexical.hpp"

class irc;
typedef std::shared_ptr<irc> irc_ptr;

class actuator
  : public std::enable_shared_from_this<actuator>
{
public:
    actuator(blockchain_ptr chain, irc_ptr irc_client);
    std::error_code query(const lexical& lex);
private:
    bool block_field(std::string& echo, const std::string& show,
        const message::block& blk);
    bool transaction_field(std::string& echo, const std::string& show,
        const message::transaction& tx);

    std::string tx_echo(const message::transaction& tx,
        const lexical& lex);
    std::string input_echo(const message::transaction_input& input,
        const lexical& lex);
    std::string output_echo(const message::transaction_output& output,
        const lexical& lex);

    void handle_block_fetch(const std::error_code& ec,
        const message::block& blk, const lexical& lex);
    void handle_transaction_fetch(const std::error_code& ec,
        const message::transaction& tx, const lexical& lex);
    void handle_last_depth_fetch(const std::error_code& ec, size_t depth);
    void handle_outputs_fetch(const std::error_code& ec,
        const message::output_point_list& outpoints,
        const short_hash& hash160, const lexical& lex);

    blockchain_ptr chain_;
    irc_ptr irc_client_;
};

typedef std::shared_ptr<actuator> actuator_ptr;

#endif

