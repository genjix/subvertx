#include "lexical.hpp"

#include <boost/algorithm/string.hpp>
#include <boost/regex.hpp>

bool lexical::parse(const std::string& line)
{
    boost::cmatch res;
    boost::regex rx("^(\\w+)\\((.*?)\\)\\[(.*?)\\]$");
    if (!boost::regex_search(line.c_str(), res, rx))
    {
        command_ = line;
        boost::regex fallback_rx("^\\w+$");
        return boost::regex_match(line.c_str(), fallback_rx);
    }
    command_ = res[1];
    explode(arguments_, res[2]);
    explode(show_results_, res[3]);
    return true;
}

void lexical::explode(string_list& into, const std::string& line)
{
    if (line.empty())
        return;
    boost::split(into, line, boost::is_any_of(","));
    for (std::string& param: into)
        boost::trim(param);
}

const std::string& lexical::command() const
{
    return command_;
}
const lexical::string_list& lexical::arguments() const
{
    return arguments_;
}
const lexical::string_list& lexical::show_results() const
{
    return show_results_;
}

